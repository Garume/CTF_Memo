from Crypto.Util.number import *

r = 91174436822013343137307132691555786162066650358214047545316738136608695253999
rq = 19810366367306768644232525389747537275045405439314176008633941392973721570576
e = 2003
n = 53664914438946444484927033862034379455718178099855523463910489141278737139791364848208743006407518112277320817669787439691746610553268296914262444216919462704386000709590354290776125186391163453068896662299911360086707554877293931251419654653697668300856682339771668434126765552712459921497413416092669041767
s = 1265360460709769693851512645319061903059544747651255568642678113569298391357942430157526652399779965777773923822682724660363135543391240091671
cipher = 3525641216292044326230126878010965135622104164889473380631987836858540038157143138676142725091457076602363325805674619659098806219641234241974545976708403653241036734687378559603323103895230661957412111732445158813275702605408361822949263056812334913257113499719211581915694082795450665196587909415670111499

q = r - rq
p = n // q // r
assert p*q*r == n

phi = (p - 1)*(q - 1)*(r - 1)
d = inverse(e, phi)
flag = pow(cipher, d, n)

print(long_to_bytes(flag))
